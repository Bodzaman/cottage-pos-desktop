name: Build and Release Electron App

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: yarn install

    - name: Bump package.json version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION="${{github.ref_name}}"
        VERSION="${TAG_VERSION#v}"
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $VERSION"

        # Update package.json version
        npm version $VERSION --no-git-tag-version
        echo "Updated package.json to version $VERSION"

    - name: Build/release Electron app
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "üè∑Ô∏è Tag detected - building with publish"
          yarn run dist
        else
          echo "üåø Branch build - build only, no publish"
          yarn run build
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate version consistency
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        TAG_VERSION="${{github.ref_name}}"
        VERSION="${TAG_VERSION#v}"

        echo "Validating version consistency..."
        echo "Expected version: $VERSION"

        # Check package.json version
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "Package.json version: $PACKAGE_VERSION"

        # Check latest.yml version if it exists
        if [ -f "dist/latest.yml" ]; then
          YML_VERSION=$(grep -o 'version: [0-9]*\.[0-9]*\.[0-9]*' dist/latest.yml | cut -d' ' -f2)
          echo "latest.yml version: $YML_VERSION"

          if [ "$YML_VERSION" != "$VERSION" ]; then
            echo "‚ùå ERROR: latest.yml version ($YML_VERSION) != tag version ($VERSION)"
            exit 1
          fi
        fi

        if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
          echo "‚ùå ERROR: package.json version ($PACKAGE_VERSION) != tag version ($VERSION)"
          exit 1
        fi

        # Check exe filename contains correct version
        EXE_FILE=$(find dist/ -name "*-$VERSION-Setup.exe" | head -1)
        if [ -z "$EXE_FILE" ]; then
          echo "‚ùå ERROR: No .exe file found with version $VERSION"
          find dist/ -name "*.exe"
          exit 1
        fi

        echo "‚úÖ All version checks passed!"
