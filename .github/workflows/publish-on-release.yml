name: Build and Release Printer Service Installer

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        working-directory: printer-service
        run: npm install
      
      - name: Download NSSM (Windows Service Manager)
        run: |
          Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "nssm.zip"
          Expand-Archive -Path "nssm.zip" -DestinationPath "."
          Move-Item "nssm-2.24/win64/nssm.exe" "installer/nssm.exe"
        shell: pwsh
      
      - name: Download Node.js standalone binary
        run: |
          Invoke-WebRequest -Uri "https://nodejs.org/dist/v18.18.0/node-v18.18.0-win-x64.zip" -OutFile "node.zip"
          Expand-Archive -Path "node.zip" -DestinationPath "."
          New-Item -ItemType Directory -Force -Path "installer/node-runtime"
          Move-Item "node-v18.18.0-win-x64/node.exe" "installer/node-runtime/node.exe"
        shell: pwsh
      
      - name: Copy printer service files to installer directory
        run: |
          New-Item -ItemType Directory -Force -Path "installer/printer-service"
          Copy-Item -Recurse -Force "printer-service/*" "installer/printer-service/"
        shell: pwsh
      
      - name: Setup NSIS
        run: |
          choco install nsis -y
          refreshenv
        shell: pwsh
      
      - name: Build installer with NSIS
        run: |
          & "C:\Program Files (x86)\NSIS\makensis.exe" installer/printer-service-setup.nsi
        shell: pwsh
      
      - name: Get version from release or input
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "release") {
            $version = "${{ github.event.release.tag_name }}"
          } else {
            $version = "${{ github.event.inputs.version }}"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh
      
      - name: Rename installer with version
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          Move-Item "installer/CottageTandooriPrinterService-Setup.exe" "CottageTandooriPrinterService-$version.exe"
        shell: pwsh
      
      - name: Upload installer to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./CottageTandooriPrinterService-${{ steps.get_version.outputs.version }}.exe
          asset_name: CottageTandooriPrinterService-${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/octet-stream
      
      - name: Upload installer artifact (manual workflow)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: printer-service-installer
          path: CottageTandooriPrinterService-${{ steps.get_version.outputs.version }}.exe
          retention-days: 30
